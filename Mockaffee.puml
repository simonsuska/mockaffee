@startuml Mockaffee

skinparam linetype ortho

' ENUMS

enum Frequency <<public>> {
	{field} atLeast(UInt)
	{field} atMost(UInt)
	{field} moreThan(UInt)
	{field} lessThan(UInt)
	{field} exactly(UInt)

	~ {field} description: String

	~ {method} validate(value: UInt): Bool
}

enum Instruction {
	{field} count
	{field} verify(Frequency, StaticString, UInt)
	{field} return(Any)
	{field} throw(Error)
}

enum RegisterID {
	{field} functionCallRegister
	{field} returnBehaviorRegister
	{field} throwBehaviorRegister

	~ {method} initialize(): Register
}

' STRUCTS

struct DefaultDescriptionProvider {
	- {field} {static} argumentSeparator: String
	- {field} {static} valueTypeSeparator: String

	~ {method} description(object: Any?): String
}

' PROTOCOLS

protocol BehaviorRegister<Value> {
	~ {method} record(value: Value, key: String)
	~ {method} fetchValue(key: String): Value?
}

protocol CallRegister {
	~ {method} increase(key: String)
	~ {method} getCount(key: String): UInt
}

protocol DescriptionProvider {
	~ {method} description(object: Any?): String
}

protocol Register {}

' CLASSES

class DefaultBehaviorRegister<Value> <<final>> {
	- {field} register: Dictionary<String, Value>

	~ {method} record(value: Value, key: String)
	~ {method} fetchValue(key: String): Value?
}

class FunctionCallRegister <<final>> {
	- {field} register: Dictionary<String, UInt>

	~ {method} increase(key: String)
	~ {method} getCount(key: String): UInt
}

class Library <<final>> {
	~ {method} init()

	~ {method} getCount(key: String, registerID: RegisterID): UInt
	~ {method} increase(key: String, registerID: RegisterID)
	~ {method} getValue(key: String, registerID: RegisterID): Any?
	~ {method} setValue<T>(value: T, key: String, registerID: RegisterID)
}

class Mock <<open>> {
	+ {method} init()

	- {method} verify(frequency: Frequency, fhash: String, file: StaticString, line: UInt) <<final>>
	- {method} count(fhash: String) <<final>>
	- {method} set(value: Any, fhash: String) <<final>>
	- {method} set(error: Error, fhash: String) <<final>>
	- {method} getFHash(fsignature: String, values: Any?...): String <<final>>
	- {method} executeInstruction(fhash: String): Bool <<final>>
	~ {method} force(instruction: Instruction) <<final>>
	+ {method} called(fsignature: String, values: Any?...) <<final>>
	+ {method} calledReturning(fsignature: String, values: Any?...): Any? <<final>>
	+ {method} calledThrowing(fsignature: String, values: Any?...) throws <<final>>
	+ {method} calledThrowReturning(fsignature: String, values: Any?...) throws Any? <<final>>
}

' EXTENSIONS

abstract Data <<(X, #FED95C)>> {
	~ {field} sha1: String
}

' GLOBALS

abstract Globals <<(G, #FF7700)>> {
	+ {method} atLeast(times: UInt): Frequency
	+ {method} atMost(times: UInt): Frequency
	+ {method} moreThan(times: UInt): Frequency
	+ {method} lessThan(times: UInt): Frequency
	+ {method} exactly(times: UInt): Frequency
	+ {method} never(): Frequency
	+ {method} verify<T>(mock: T, times: Frequency, file: StaticString, line: UInt): T
	+ {method} when<T>(mock: T, value: Any): T
	+ {method} when<T>(mock: T, error: Error): T
}

' ASSOCIATIONS

Frequency <-- Globals : use
Frequency <--- Mock : use
Mock <-- Globals : use
Mock +-- Instruction
Instruction "instruction 1" -- "*" Mock
Library "library 1" --- "*" Mock
Library +--- RegisterID
DescriptionProvider "descriptionProvider 1" --- "*" Mock
DescriptionProvider <|--- DefaultDescriptionProvider
Data <-- DefaultDescriptionProvider : use
Register "registers *" -- "1" Library
Register <|-- CallRegister
Register <|-- BehaviorRegister
CallRegister <|-- FunctionCallRegister
BehaviorRegister <|--- DefaultBehaviorRegister

@enduml
